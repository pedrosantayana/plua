// Whitespace - Status: Done
WHITESPACE = _{" "|"\\f"|"\\n"|"\\r"|"\\t"|"\\v"}

// Comments 
// COMMENT = {  }

// Numeric constant DONE
integer   = @{^"0x" ~ ASCII_HEX_DIGIT+|ASCII_DIGIT+}
hex_float = @{
    ^"0x" ~ ASCII_HEX_DIGIT+ ~ ("." ~ ASCII_HEX_DIGIT+)? ~ (^"p" ~ ("+"|"-")? ~ ASCII_HEX_DIGIT+)?
}
dec_float = @{ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? ~ (^"e" ~ ("+"|"-")? ~ ASCII_DIGIT+)?}
float     = @{hex_float|dec_float}
Numeral   =  {float|integer}

// Literal String fixme
inner         = _{
    ASCII_ALPHANUMERIC
  | " "
  | "\\a"
  | "\\b"
  | "\\f"
  | "\\n"
  | "\\r"
  | "\\t"
  | "\\v"
  | "\\"
}
double_quotes = @{"\"" ~ (inner|"\"")* ~ "\""}
single_quotes = @{"\"" ~ (inner|"\"")* ~ "\""}
LiteralString =  {double_quotes|single_quotes}

// Names
reserved = _{
    "and"
  | "break"
  | "do"
  | "else"
  | "elseif"
  | "false"
  | "for"
  | "function"
  | "goto"
  | "if"
  | "local"
  | "nil"
  | "not"
  | "or"
  | "repeat"
  | "then"
  | "true"
  | "until"
  | "while"
  | "end"
  | "in"
  | "return"
}

Name = @{!reserved ~ ASCII_ALPHA ~ ASCII_ALPHANUMERIC*}

// Lua 5.4 Grammar 
chunk =  {SOI ~ block ~ EOI}

block =  {stat* ~ retstat?}

stat =  {
    ";"
  | varlist ~ "=" ~ explist
  | functioncall
  | label
  | "break"
  | "goto" ~ Name
  | "do" ~ block ~ "end"
  | "while" ~ exp ~ "do" ~ block ~ "end"
  | "repeat" ~ block ~ "until" ~ exp
  | "if" ~ exp ~ "then" ~ block ~ ("elseif" ~ exp ~ "then" ~ block)* ~ ("else" ~ block)? ~ "end"
  | "for" ~ Name ~ "=" ~ exp ~ "," ~ exp ~ ("," ~ exp)? ~ "do" ~ block ~ "end"
  | "for" ~ namelist ~ "in" ~ explist ~ "do" ~ block ~ "end"
  | "function" ~ funcname ~ funcbody
  | "local" ~ "function" ~ Name ~ funcbody
  | "local" ~ attnamelist ~ ("=" ~ explist)?
}

attnamelist =  {Name ~ attrib ~ ("," ~ Name ~ attrib)*}

attrib =  {("<" ~ Name ~ ">")?}

retstat =  {"return" ~ explist? ~ ";"?}

label =  {"::" ~ Name ~ "::"}

funcname =  {Name ~ ("." ~ Name)* ~ (":" ~ Name)?}

varlist =  {var ~ ("," ~ var)*}

// 
//var =  {prefixexp ~ ("[" ~ exp ~ "]"| Name)|Name}
var = {Name ~ var1}
var1 = _{("[" ~ exp ~ "]"| Name) ~ var1|Name}

namelist =  {Name ~ ("," ~ Name)*}

explist =  {exp ~ ("," ~ exp)*}

// exp =  {
//     "nil"
//   | "false"
//   | "true"
//   | Numeral
//   | LiteralString
//   | "..."
//   | functiondef
//   | prefixexp
//   | tableconstructor
//   | exp ~ binop ~ exp
//   | unop ~ exp
// }

//new exp
exp =  {
    ("nil"
  | "false"
  | "true"
  | Numeral
  | LiteralString
  | "..."
  | functiondef
  | prefixexp
  | tableconstructor)
  ~ exp_bin
  | unop ~ exp
}

exp_bin = {(binop ~ exp ~ exp_bin)*}

exp_un = {(unop ~ exp)*}
//                Ab                    a
//prefixexp =  {functioncall|("(" ~ exp ~ ")"|var)}
//                A           =============b============
functioncall =  {prefixexp ~ ((":" ~ Name ~ args)|args)}

//new 
//prefixexp =  {prefixexp ~ ((":" ~ Name ~ args)|args)|("(" ~ exp ~ ")"|var)}
prefixexp = {("(" ~ exp ~ ")"|var)~prefixexp1}
prefixexp1 = _{(((":" ~ Name ~ args)|args)~prefixexp1)*}

args =  {"(" ~ explist? ~ ")"|tableconstructor|LiteralString}

functiondef =  {"function" ~ funcbody}

funcbody =  {"(" ~ parlist? ~ ")" ~ block ~ "end"}

parlist =  {namelist ~ ("," ~ "...")?|"..."}

tableconstructor =  {"{" ~ fieldlist? ~ "}"}

fieldlist =  {field ~ (fieldsep ~ field)* ~ fieldsep?}

field =  {"[" ~ exp ~ "]" ~ "=" ~ exp|Name ~ "=" ~ exp|exp}

fieldsep =  {","|";"}

binop =  {
    "+"
  | "-"
  | "*"
  | "/"
  | "//"
  | "^"
  | "%"
  | "&"
  | "~"
  | "|"
  | ">>"
  | "<<"
  | ".."
  | "<"
  | "<="
  | ">"
  | ">="
  | "=="
  | "~="
  | "and"
  | "or"
}

unop =  {"-"|"not"|"#"|"~"}

